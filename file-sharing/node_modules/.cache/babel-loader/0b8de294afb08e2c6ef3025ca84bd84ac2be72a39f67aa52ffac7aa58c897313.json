{"ast":null,"code":"// Thunk for verifying OTP\nexport const verifyOtp = createAsyncThunk('auth/verifyOtp', async ({\n  email,\n  otp\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('http://localhost:8000/auth/users/verify_otp', {\n      email,\n      otp\n    });\n    return response.data; // Assumes backend returns { token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || 'Failed to verify OTP');\n  }\n});","map":{"version":3,"names":["verifyOtp","createAsyncThunk","email","otp","rejectWithValue","response","axios","post","data","error"],"sources":["/Users/prashant/Development/file-sharing/src/features/auth/authSlice.js"],"sourcesContent":["// Thunk for verifying OTP\nexport const verifyOtp = createAsyncThunk(\n  'auth/verifyOtp',\n  async ({ email, otp }, { rejectWithValue }) => {\n    try {\n      const response = await axios.post('http://localhost:8000/auth/users/verify_otp', {\n        email,\n        otp,\n      });\n      return response.data; // Assumes backend returns { token }\n    } catch (error) {\n      return rejectWithValue(error.response.data || 'Failed to verify OTP');\n    }\n  }\n);\n"],"mappings":"AAAA;AACA,OAAO,MAAMA,SAAS,GAAGC,gBAAgB,CACvC,gBAAgB,EAChB,OAAO;EAAEC,KAAK;EAAEC;AAAI,CAAC,EAAE;EAAEC;AAAgB,CAAC,KAAK;EAC7C,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAACC,IAAI,CAAC,6CAA6C,EAAE;MAC/EL,KAAK;MACLC;IACF,CAAC,CAAC;IACF,OAAOE,QAAQ,CAACG,IAAI,CAAC,CAAC;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACd,OAAOL,eAAe,CAACK,KAAK,CAACJ,QAAQ,CAACG,IAAI,IAAI,sBAAsB,CAAC;EACvE;AACF,CACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}