{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Base API URL (replace with your backend API URL)\n\n// Thunk for user login\nexport const login = createAsyncThunk('auth/login', async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post('', {\n      email,\n      password\n    });\n    console.log(response);\n    return response.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || 'Failed to login');\n  }\n});\n\n// Thunk for user signup\nexport const signup = createAsyncThunk('auth/signup', async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`${process.env.API_BASE_UR}/signup`, {\n      email,\n      password\n    });\n    return response.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || 'Failed to signup');\n  }\n});\n\n// Initial state for the auth slice\nconst initialState = {\n  user: null,\n  token: null,\n  status: 'idle',\n  // Can be 'idle', 'loading', 'succeeded', or 'failed'\n  error: null\n};\n\n// Auth slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: state => {\n      state.user = null;\n      state.token = null;\n      state.status = 'idle';\n    }\n  },\n  extraReducers: builder => {\n    // Login action handlers\n    builder.addCase(login.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.status = 'succeeded';\n      state.error = null;\n    }).addCase(login.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Login failed';\n    });\n\n    // Signup action handlers\n    builder.addCase(signup.pending, state => {\n      state.status = 'loading';\n      state.error = null;\n    }).addCase(signup.fulfilled, (state, action) => {\n      state.user = action.payload.user;\n      state.token = action.payload.token;\n      state.status = 'succeeded';\n      state.error = null;\n    }).addCase(signup.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.payload || 'Signup failed';\n    });\n  }\n});\n\n// Export actions and reducer\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","login","email","password","rejectWithValue","response","post","console","log","data","error","signup","process","env","API_BASE_UR","initialState","user","token","status","authSlice","name","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Base API URL (replace with your backend API URL)\n\n\n// Thunk for user login\nexport const login = createAsyncThunk('auth/login', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const response = await axios.post('', { email, password });\n    console.log(response);\n    return response.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || 'Failed to login');\n  }\n});\n\n// Thunk for user signup\nexport const signup = createAsyncThunk('auth/signup', async ({ email, password }, { rejectWithValue }) => {\n  try {\n    const response = await axios.post(`${process.env.API_BASE_UR}/signup`, { email, password });\n    return response.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || 'Failed to signup');\n  }\n});\n\n// Initial state for the auth slice\nconst initialState = {\n  user: null,\n  token: null,\n  status: 'idle', // Can be 'idle', 'loading', 'succeeded', or 'failed'\n  error: null,\n};\n\n// Auth slice\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    logout: (state) => {\n      state.user = null;\n      state.token = null;\n      state.status = 'idle';\n    },\n  },\n  extraReducers: (builder) => {\n    // Login action handlers\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n        state.status = 'succeeded';\n        state.error = null;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload || 'Login failed';\n      });\n\n    // Signup action handlers\n    builder\n      .addCase(signup.pending, (state) => {\n        state.status = 'loading';\n        state.error = null;\n      })\n      .addCase(signup.fulfilled, (state, action) => {\n        state.user = action.payload.user;\n        state.token = action.payload.token;\n        state.status = 'succeeded';\n        state.error = null;\n      })\n      .addCase(signup.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.payload || 'Signup failed';\n      });\n  },\n});\n\n// Export actions and reducer\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}