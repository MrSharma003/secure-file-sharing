{"ast":null,"code":"import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Base API URL (replace with your backend API URL)\n\n// Thunk for user login\nexport const login = createAsyncThunk(\"auth/login\", async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(\"http://localhost:8000/api/token\", {\n      email,\n      password\n    });\n    console.log(response);\n    return response.data.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || \"Failed to login\");\n  }\n});\n\n// Thunk for user signup\nexport const signup = createAsyncThunk(\"auth/signup\", async ({\n  email,\n  password\n}, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await axios.post(`${process.env.API_BASE_UR}/signup`, {\n      email,\n      password\n    });\n    return response.data; // Assumes the backend returns { user, token }\n  } catch (error) {\n    return rejectWithValue(error.response.data || \"Failed to signup\");\n  }\n});\n\n// Initial state for the auth slice\nconst initialState = {\n  //   user: null,\n  token: null,\n  refresh_token: null,\n  status: \"idle\",\n  // Can be 'idle', 'loading', 'succeeded', or 'failed'\n  error: null\n};\n\n// Auth slice\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout: state => {\n      //   state.user = null;\n      state.token = null;\n      //   refresh_token = null;\n      state.status = \"idle\";\n    }\n  },\n  extraReducers: builder => {\n    // Login action handlers\n    builder.addCase(login.pending, state => {\n      state.status = \"loading\";\n      state.error = null;\n    }).addCase(login.fulfilled, (state, action) => {\n      console.log();\n      // state.user = action.payload.user;\n      state.token = action.payload.access;\n      // state.refresh_token = action.payload.refresh_token;\n      state.status = \"succeeded\";\n      state.error = null;\n    }).addCase(login.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload || \"Login failed\";\n    });\n\n    // Signup action handlers\n    builder.addCase(signup.pending, state => {\n      state.status = \"loading\";\n      state.error = null;\n    }).addCase(signup.fulfilled, (state, action) => {\n      // state.user = action.payload.user;\n      state.token = action.payload.access;\n      // state.refresh_token = action.payload.refresh_token;\n      state.status = \"succeeded\";\n      state.error = null;\n    }).addCase(signup.rejected, (state, action) => {\n      state.status = \"failed\";\n      state.error = action.payload || \"Signup failed\";\n    });\n  }\n});\n\n// Export actions and reducer\nexport const {\n  logout\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","login","email","password","rejectWithValue","response","post","console","log","data","error","signup","process","env","API_BASE_UR","initialState","token","refresh_token","status","authSlice","name","reducers","logout","state","extraReducers","builder","addCase","pending","fulfilled","action","payload","access","rejected","actions","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/auth/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from \"@reduxjs/toolkit\";\nimport axios from \"axios\";\n\n// Base API URL (replace with your backend API URL)\n\n// Thunk for user login\nexport const login = createAsyncThunk(\n  \"auth/login\",\n  async ({ email, password }, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(\"http://localhost:8000/api/token\", {\n        email,\n        password,\n      });\n      console.log(response);\n      return response.data.data; // Assumes the backend returns { user, token }\n    } catch (error) {\n      return rejectWithValue(error.response.data || \"Failed to login\");\n    }\n  }\n);\n\n// Thunk for user signup\nexport const signup = createAsyncThunk(\n  \"auth/signup\",\n  async ({ email, password }, { rejectWithValue }) => {\n    try {\n      const response = await axios.post(`${process.env.API_BASE_UR}/signup`, {\n        email,\n        password,\n      });\n      return response.data; // Assumes the backend returns { user, token }\n    } catch (error) {\n      return rejectWithValue(error.response.data || \"Failed to signup\");\n    }\n  }\n);\n\n// Initial state for the auth slice\nconst initialState = {\n//   user: null,\n  token: null,\n  refresh_token: null,\n  status: \"idle\", // Can be 'idle', 'loading', 'succeeded', or 'failed'\n  error: null,\n};\n\n// Auth slice\nconst authSlice = createSlice({\n  name: \"auth\",\n  initialState,\n  reducers: {\n    logout: (state) => {\n    //   state.user = null;\n      state.token = null;\n    //   refresh_token = null;\n      state.status = \"idle\";\n    },\n  },\n  extraReducers: (builder) => {\n    // Login action handlers\n    builder\n      .addCase(login.pending, (state) => {\n        state.status = \"loading\";\n        state.error = null;\n      })\n      .addCase(login.fulfilled, (state, action) => {\n        console.log()\n        // state.user = action.payload.user;\n        state.token = action.payload.access;\n        // state.refresh_token = action.payload.refresh_token;\n        state.status = \"succeeded\";\n        state.error = null;\n      })\n      .addCase(login.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload || \"Login failed\";\n      });\n\n    // Signup action handlers\n    builder\n      .addCase(signup.pending, (state) => {\n        state.status = \"loading\";\n        state.error = null;\n      })\n      .addCase(signup.fulfilled, (state, action) => {\n        // state.user = action.payload.user;\n        state.token = action.payload.access;\n        // state.refresh_token = action.payload.refresh_token;\n        state.status = \"succeeded\";\n        state.error = null;\n      })\n      .addCase(signup.rejected, (state, action) => {\n        state.status = \"failed\";\n        state.error = action.payload || \"Signup failed\";\n      });\n  },\n});\n\n// Export actions and reducer\nexport const { logout } = authSlice.actions;\nexport default authSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}