{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport CryptoJS from 'crypto-js';\nconst SECRET_KEY = CryptoJS.enc.Utf8.parse('your-secret-key'); // 16 bytes key\nconst BLOCK_SIZE = 16; // AES block size\n\nfunction decryptFile(encryptedHex) {\n  try {\n    // Decode hex string to bytes\n    const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedHex);\n    const encryptedData = CryptoJS.lib.WordArray.create(encryptedBytes.words);\n\n    // Extract IV and ciphertext\n    const iv = CryptoJS.lib.WordArray.create(encryptedData.words.slice(0, BLOCK_SIZE / 4), BLOCK_SIZE);\n    const ciphertext = CryptoJS.lib.WordArray.create(encryptedData.words.slice(BLOCK_SIZE / 4));\n\n    // Decrypt using AES-CBC\n    const decrypted = CryptoJS.AES.decrypt({\n      ciphertext\n    }, SECRET_KEY, {\n      iv: iv,\n      mode: CryptoJS.mode.CBC,\n      padding: CryptoJS.pad.Pkcs7\n    });\n\n    // Convert decrypted data back to UTF-8 string or blob\n    const fileContent = CryptoJS.enc.Utf8.stringify(decrypted);\n    return fileContent; // Or return Blob for file download\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file content.');\n  }\n}\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async (_, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch('http://localhost:8000/auth/files/list', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Add the Bearer token\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch files');\n  }\n  const data = await response.json();\n  return data.files;\n});\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk('files/uploadFile', async (formData, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch('http://localhost:8000/auth/files/upload', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('File upload failed');\n  }\n  return response.json();\n});\n\n// Share file with a user\nexport const shareFile = createAsyncThunk('files/shareFile', async ({\n  fileId,\n  data\n}) => {\n  const response = await fetch(`http://localhost:8000/auth/share/file/${fileId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n});\n\n// Generate a secure link for the file\nexport const generateSecureLink = createAsyncThunk('files/generateSecureLink', async (fileId, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch(`http://localhost:8000/auth/share_files/generate_secure_link/${fileId}/`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to generate secure link');\n  }\n  const data = await response.json();\n  console.log(data);\n  return data.secureLink; // Assuming the API returns a `secureLink` field\n});\n\n// Download a file\nexport const downloadFile = createAsyncThunk('files/downloadFile', async (fileId, {\n  getState\n}) => {\n  console.log(\"blob two: \");\n  const token = getState().auth.token;\n  const response = await fetch(`http://localhost:8000/auth/files/download/${fileId}/`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to download the file');\n  }\n  console.log(\"blob one: \");\n  const blob = await response.blob(); // Convert response to a Blob for file download\n  console.log(\"blob: \", blob);\n  const url = window.URL.createObjectURL(blob);\n\n  // Trigger file download\n  const a = document.createElement('a');\n  a.href = url;\n  a.download = 'file_name'; // Replace with a dynamic file name if needed\n  document.body.appendChild(a);\n  a.click();\n  a.remove();\n  window.URL.revokeObjectURL(url);\n  return fileId; // Optionally return the fileId to update state\n});\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n  secureLink: null // New state to hold the generated secure link\n};\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload; // Set the files to the fetched data\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(uploadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(uploadFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n    }).addCase(uploadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(shareFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(shareFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // handle the successful share action (e.g., update the file list)\n    }).addCase(shareFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(generateSecureLink.pending, state => {\n      state.status = 'loading';\n    }).addCase(generateSecureLink.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.secureLink = action.payload; // Set the generated secure link\n    }).addCase(generateSecureLink.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(downloadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(downloadFile.fulfilled, state => {\n      state.status = 'succeeded';\n      // Handle post-download logic if needed\n    }).addCase(downloadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","CryptoJS","SECRET_KEY","enc","Utf8","parse","BLOCK_SIZE","decryptFile","encryptedHex","encryptedBytes","Hex","encryptedData","lib","WordArray","create","words","iv","slice","ciphertext","decrypted","AES","decrypt","mode","CBC","padding","pad","Pkcs7","fileContent","stringify","error","console","Error","fetchFiles","_","getState","token","auth","response","fetch","method","headers","ok","data","json","files","uploadFile","formData","body","shareFile","fileId","JSON","generateSecureLink","log","secureLink","downloadFile","blob","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","revokeObjectURL","initialState","status","fileSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport CryptoJS from 'crypto-js';\n\nconst SECRET_KEY = CryptoJS.enc.Utf8.parse('your-secret-key'); // 16 bytes key\nconst BLOCK_SIZE = 16; // AES block size\n\nfunction decryptFile(encryptedHex) {\n  try {\n    // Decode hex string to bytes\n    const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedHex);\n    const encryptedData = CryptoJS.lib.WordArray.create(encryptedBytes.words);\n\n    // Extract IV and ciphertext\n    const iv = CryptoJS.lib.WordArray.create(\n      encryptedData.words.slice(0, BLOCK_SIZE / 4),\n      BLOCK_SIZE\n    );\n    const ciphertext = CryptoJS.lib.WordArray.create(\n      encryptedData.words.slice(BLOCK_SIZE / 4)\n    );\n\n    // Decrypt using AES-CBC\n    const decrypted = CryptoJS.AES.decrypt(\n      { ciphertext },\n      SECRET_KEY,\n      { iv: iv, mode: CryptoJS.mode.CBC, padding: CryptoJS.pad.Pkcs7 }\n    );\n\n    // Convert decrypted data back to UTF-8 string or blob\n    const fileContent = CryptoJS.enc.Utf8.stringify(decrypted);\n    return fileContent; // Or return Blob for file download\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt file content.');\n  }\n}\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk(\n  'files/fetchFiles',\n  async (_, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch('http://localhost:8000/auth/files/list', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`, // Add the Bearer token\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch files');\n    }\n\n    const data = await response.json();\n    return data.files;\n  }\n);\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk(\n  'files/uploadFile',\n  async (formData, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch('http://localhost:8000/auth/files/upload', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error('File upload failed');\n    }\n\n    return response.json();\n  }\n);\n\n// Share file with a user\nexport const shareFile = createAsyncThunk(\n  'files/shareFile',\n  async ({ fileId, data }) => {\n    const response = await fetch(`http://localhost:8000/auth/share/file/${fileId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n);\n\n// Generate a secure link for the file\nexport const generateSecureLink = createAsyncThunk(\n  'files/generateSecureLink',\n  async (fileId, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch(`http://localhost:8000/auth/share_files/generate_secure_link/${fileId}/`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to generate secure link');\n    }\n\n    const data = await response.json();\n    console.log(data);\n    return data.secureLink; // Assuming the API returns a `secureLink` field\n  }\n);\n\n// Download a file\nexport const downloadFile = createAsyncThunk(\n  'files/downloadFile',\n  async (fileId, { getState }) => {\n    console.log(\"blob two: \");\n    const token = getState().auth.token;\n    const response = await fetch(`http://localhost:8000/auth/files/download/${fileId}/`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to download the file');\n    }\n    console.log(\"blob one: \");\n    const blob = await response.blob(); // Convert response to a Blob for file download\n    console.log(\"blob: \", blob);\n    const url = window.URL.createObjectURL(blob);\n\n    // Trigger file download\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'file_name'; // Replace with a dynamic file name if needed\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    window.URL.revokeObjectURL(url);\n\n    return fileId; // Optionally return the fileId to update state\n  }\n);\n\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n  secureLink: null, // New state to hold the generated secure link\n};\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload; // Set the files to the fetched data\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(uploadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(shareFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(shareFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // handle the successful share action (e.g., update the file list)\n      })\n      .addCase(shareFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(generateSecureLink.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(generateSecureLink.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.secureLink = action.payload; // Set the generated secure link\n      })\n      .addCase(generateSecureLink.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(downloadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(downloadFile.fulfilled, (state) => {\n        state.status = 'succeeded';\n        // Handle post-download logic if needed\n      })\n      .addCase(downloadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default fileSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,QAAQ,MAAM,WAAW;AAEhC,MAAMC,UAAU,GAAGD,QAAQ,CAACE,GAAG,CAACC,IAAI,CAACC,KAAK,CAAC,iBAAiB,CAAC,CAAC,CAAC;AAC/D,MAAMC,UAAU,GAAG,EAAE,CAAC,CAAC;;AAEvB,SAASC,WAAWA,CAACC,YAAY,EAAE;EACjC,IAAI;IACF;IACA,MAAMC,cAAc,GAAGR,QAAQ,CAACE,GAAG,CAACO,GAAG,CAACL,KAAK,CAACG,YAAY,CAAC;IAC3D,MAAMG,aAAa,GAAGV,QAAQ,CAACW,GAAG,CAACC,SAAS,CAACC,MAAM,CAACL,cAAc,CAACM,KAAK,CAAC;;IAEzE;IACA,MAAMC,EAAE,GAAGf,QAAQ,CAACW,GAAG,CAACC,SAAS,CAACC,MAAM,CACtCH,aAAa,CAACI,KAAK,CAACE,KAAK,CAAC,CAAC,EAAEX,UAAU,GAAG,CAAC,CAAC,EAC5CA,UACF,CAAC;IACD,MAAMY,UAAU,GAAGjB,QAAQ,CAACW,GAAG,CAACC,SAAS,CAACC,MAAM,CAC9CH,aAAa,CAACI,KAAK,CAACE,KAAK,CAACX,UAAU,GAAG,CAAC,CAC1C,CAAC;;IAED;IACA,MAAMa,SAAS,GAAGlB,QAAQ,CAACmB,GAAG,CAACC,OAAO,CACpC;MAAEH;IAAW,CAAC,EACdhB,UAAU,EACV;MAAEc,EAAE,EAAEA,EAAE;MAAEM,IAAI,EAAErB,QAAQ,CAACqB,IAAI,CAACC,GAAG;MAAEC,OAAO,EAAEvB,QAAQ,CAACwB,GAAG,CAACC;IAAM,CACjE,CAAC;;IAED;IACA,MAAMC,WAAW,GAAG1B,QAAQ,CAACE,GAAG,CAACC,IAAI,CAACwB,SAAS,CAACT,SAAS,CAAC;IAC1D,OAAOQ,WAAW,CAAC,CAAC;EACtB,CAAC,CAAC,OAAOE,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK,CAAC;IAC1C,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;EACpD;AACF;;AAEA;AACA,OAAO,MAAMC,UAAU,GAAGhC,gBAAgB,CACxC,kBAAkB,EAClB,OAAOiC,CAAC,EAAE;EAAEC;AAAS,CAAC,KAAK;EACzB,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,uCAAuC,EAAE;IACpEC,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUL,KAAK,EAAE,CAAE;IACtC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,uBAAuB,CAAC;EAC1C;EAEA,MAAMW,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAClC,OAAOD,IAAI,CAACE,KAAK;AACnB,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAG7C,gBAAgB,CACxC,kBAAkB,EAClB,OAAO8C,QAAQ,EAAE;EAAEZ;AAAS,CAAC,KAAK;EAChC,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyC,EAAE;IACtEC,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUL,KAAK;IAClC,CAAC;IACDY,IAAI,EAAED;EACR,CAAC,CAAC;EAEF,IAAI,CAACT,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,oBAAoB,CAAC;EACvC;EAEA,OAAOM,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CACF,CAAC;;AAED;AACA,OAAO,MAAMK,SAAS,GAAGhD,gBAAgB,CACvC,iBAAiB,EACjB,OAAO;EAAEiD,MAAM;EAAEP;AAAK,CAAC,KAAK;EAC1B,MAAML,QAAQ,GAAG,MAAMC,KAAK,CAAC,yCAAyCW,MAAM,EAAE,EAAE;IAC9EV,MAAM,EAAE,MAAM;IACdC,OAAO,EAAE;MACP,cAAc,EAAE;IAClB,CAAC;IACDO,IAAI,EAAEG,IAAI,CAACtB,SAAS,CAACc,IAAI;EAC3B,CAAC,CAAC;EACF,OAAOL,QAAQ,CAACM,IAAI,CAAC,CAAC;AACxB,CACF,CAAC;;AAED;AACA,OAAO,MAAMQ,kBAAkB,GAAGnD,gBAAgB,CAChD,0BAA0B,EAC1B,OAAOiD,MAAM,EAAE;EAAEf;AAAS,CAAC,KAAK;EAC9B,MAAMC,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,+DAA+DW,MAAM,GAAG,EAAE;IACrGV,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUL,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,gCAAgC,CAAC;EACnD;EAEA,MAAMW,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;EAClCb,OAAO,CAACsB,GAAG,CAACV,IAAI,CAAC;EACjB,OAAOA,IAAI,CAACW,UAAU,CAAC,CAAC;AAC1B,CACF,CAAC;;AAED;AACA,OAAO,MAAMC,YAAY,GAAGtD,gBAAgB,CAC1C,oBAAoB,EACpB,OAAOiD,MAAM,EAAE;EAAEf;AAAS,CAAC,KAAK;EAC9BJ,OAAO,CAACsB,GAAG,CAAC,YAAY,CAAC;EACzB,MAAMjB,KAAK,GAAGD,QAAQ,CAAC,CAAC,CAACE,IAAI,CAACD,KAAK;EACnC,MAAME,QAAQ,GAAG,MAAMC,KAAK,CAAC,6CAA6CW,MAAM,GAAG,EAAE;IACnFV,MAAM,EAAE,KAAK;IACbC,OAAO,EAAE;MACP,eAAe,EAAE,UAAUL,KAAK;IAClC;EACF,CAAC,CAAC;EAEF,IAAI,CAACE,QAAQ,CAACI,EAAE,EAAE;IAChB,MAAM,IAAIV,KAAK,CAAC,6BAA6B,CAAC;EAChD;EACAD,OAAO,CAACsB,GAAG,CAAC,YAAY,CAAC;EACzB,MAAMG,IAAI,GAAG,MAAMlB,QAAQ,CAACkB,IAAI,CAAC,CAAC,CAAC,CAAC;EACpCzB,OAAO,CAACsB,GAAG,CAAC,QAAQ,EAAEG,IAAI,CAAC;EAC3B,MAAMC,GAAG,GAAGC,MAAM,CAACC,GAAG,CAACC,eAAe,CAACJ,IAAI,CAAC;;EAE5C;EACA,MAAMK,CAAC,GAAGC,QAAQ,CAACC,aAAa,CAAC,GAAG,CAAC;EACrCF,CAAC,CAACG,IAAI,GAAGP,GAAG;EACZI,CAAC,CAACI,QAAQ,GAAG,WAAW,CAAC,CAAC;EAC1BH,QAAQ,CAACd,IAAI,CAACkB,WAAW,CAACL,CAAC,CAAC;EAC5BA,CAAC,CAACM,KAAK,CAAC,CAAC;EACTN,CAAC,CAACO,MAAM,CAAC,CAAC;EACVV,MAAM,CAACC,GAAG,CAACU,eAAe,CAACZ,GAAG,CAAC;EAE/B,OAAOP,MAAM,CAAC,CAAC;AACjB,CACF,CAAC;AAED,MAAMoB,YAAY,GAAG;EACnBzB,KAAK,EAAE,EAAE;EACT0B,MAAM,EAAE,MAAM;EACdzC,KAAK,EAAE,IAAI;EACXwB,UAAU,EAAE,IAAI,CAAE;AACpB,CAAC;AAED,MAAMkB,SAAS,GAAGxE,WAAW,CAAC;EAC5ByE,IAAI,EAAE,OAAO;EACbH,YAAY;EACZI,QAAQ,EAAE,CAAC,CAAC;EACZC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAC5C,UAAU,CAAC6C,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAAC5C,UAAU,CAAC+C,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1BQ,KAAK,CAAClC,KAAK,GAAGoC,MAAM,CAACC,OAAO,CAAC,CAAC;IAChC,CAAC,CAAC,CACDL,OAAO,CAAC5C,UAAU,CAACkD,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACjD,KAAK,GAAGmD,MAAM,CAACnD,KAAK,CAACsD,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAAC/B,UAAU,CAACgC,OAAO,EAAGC,KAAK,IAAK;MACtCA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAAC/B,UAAU,CAACkC,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAChDF,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1BQ,KAAK,CAAClC,KAAK,CAACwC,IAAI,CAACJ,MAAM,CAACC,OAAO,CAAC,CAAC,CAAC;IACpC,CAAC,CAAC,CACDL,OAAO,CAAC/B,UAAU,CAACqC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACjD,KAAK,GAAGmD,MAAM,CAACnD,KAAK,CAACsD,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAAC5B,SAAS,CAAC6B,OAAO,EAAGC,KAAK,IAAK;MACrCA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAAC5B,SAAS,CAAC+B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MAC/CF,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1B;IACF,CAAC,CAAC,CACDM,OAAO,CAAC5B,SAAS,CAACkC,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MAC9CF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACjD,KAAK,GAAGmD,MAAM,CAACnD,KAAK,CAACsD,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACzB,kBAAkB,CAAC0B,OAAO,EAAGC,KAAK,IAAK;MAC9CA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAACzB,kBAAkB,CAAC4B,SAAS,EAAE,CAACD,KAAK,EAAEE,MAAM,KAAK;MACxDF,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1BQ,KAAK,CAACzB,UAAU,GAAG2B,MAAM,CAACC,OAAO,CAAC,CAAC;IACrC,CAAC,CAAC,CACDL,OAAO,CAACzB,kBAAkB,CAAC+B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACvDF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACjD,KAAK,GAAGmD,MAAM,CAACnD,KAAK,CAACsD,OAAO;IACpC,CAAC,CAAC,CACDP,OAAO,CAACtB,YAAY,CAACuB,OAAO,EAAGC,KAAK,IAAK;MACxCA,KAAK,CAACR,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDM,OAAO,CAACtB,YAAY,CAACyB,SAAS,EAAGD,KAAK,IAAK;MAC1CA,KAAK,CAACR,MAAM,GAAG,WAAW;MAC1B;IACF,CAAC,CAAC,CACDM,OAAO,CAACtB,YAAY,CAAC4B,QAAQ,EAAE,CAACJ,KAAK,EAAEE,MAAM,KAAK;MACjDF,KAAK,CAACR,MAAM,GAAG,QAAQ;MACvBQ,KAAK,CAACjD,KAAK,GAAGmD,MAAM,CAACnD,KAAK,CAACsD,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,eAAeZ,SAAS,CAACc,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}