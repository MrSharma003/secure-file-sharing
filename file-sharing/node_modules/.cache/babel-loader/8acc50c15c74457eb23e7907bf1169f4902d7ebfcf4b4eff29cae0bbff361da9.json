{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async (_, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  console.log(token);\n  const response = await fetch('http://localhost:8000/auth/files/list', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Add the Bearer token\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch files');\n  }\n  const data = await response.json();\n  return data.files;\n});\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk('files/uploadFile', async formData => {\n  const response = await fetch('http://localhost:8000/auth/files/upload', {\n    method: 'POST',\n    body: formData\n  });\n  return response.json();\n});\n\n// Share file with a user\nexport const shareFile = createAsyncThunk('files/shareFile', async ({\n  fileId,\n  data\n}) => {\n  const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n});\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null\n};\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload; // Set the files to the fetched data\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(uploadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(uploadFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n    }).addCase(uploadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(shareFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(shareFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // handle the successful share action (e.g., update the file list)\n    }).addCase(shareFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchFiles","_","getState","token","auth","console","log","response","fetch","method","headers","ok","Error","data","json","files","uploadFile","formData","body","shareFile","fileId","JSON","stringify","initialState","status","error","fileSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk(\n  'files/fetchFiles',\n  async (_, { getState }) => {\n    const token = getState().auth.token;\n    console.log(token)\n    const response = await fetch('http://localhost:8000/auth/files/list', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`, // Add the Bearer token\n      },\n    });\n    \n    if (!response.ok) {\n      throw new Error('Failed to fetch files');\n    }\n    \n    const data = await response.json();\n    return data.files;\n  }\n);\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk(\n  'files/uploadFile',\n  async (formData) => {\n    const response = await fetch('http://localhost:8000/auth/files/upload', {\n      method: 'POST',\n      body: formData,\n    });\n    return response.json();\n  }\n);\n\n// Share file with a user\nexport const shareFile = createAsyncThunk(\n  'files/shareFile',\n  async ({ fileId, data }) => {\n    const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n);\n\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n};\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload; // Set the files to the fetched data\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(uploadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(shareFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(shareFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // handle the successful share action (e.g., update the file list)\n      })\n      .addCase(shareFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default fileSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}