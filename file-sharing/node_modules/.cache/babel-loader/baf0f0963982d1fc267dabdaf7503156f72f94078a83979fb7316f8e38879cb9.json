{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = () => async (dispatch, getState) => {\n  try {\n    // Get the token from Redux store or localStorage (adjust accordingly)\n    const token = getState().auth.token || localStorage.getItem('token');\n    console.log(token);\n    const response = await fetch('http://localhost:8000/auth/files/list', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}` // Add the Bearer token\n      }\n    });\n    if (!response.ok) {\n      throw new Error('Failed to fetch files');\n    }\n    const data = await response.json();\n\n    // Dispatch success action with the files data\n    dispatch({\n      type: 'files/fetchSuccess',\n      payload: data.files\n    });\n  } catch (error) {\n    dispatch({\n      type: 'files/fetchFailure',\n      error: error.message\n    });\n  }\n};\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk('files/uploadFile', async formData => {\n  const response = await fetch('http://localhost:8000/auth/files/upload', {\n    method: 'POST',\n    body: formData\n  });\n  return response.json();\n});\n\n// Share file with a user\nexport const shareFile = createAsyncThunk('files/shareFile', async ({\n  fileId,\n  data\n}) => {\n  const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n});\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null\n};\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload;\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(uploadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(uploadFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n    }).addCase(uploadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(shareFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(shareFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // handle the successful share action (e.g., update the file list)\n    }).addCase(shareFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchFiles","dispatch","getState","token","auth","localStorage","getItem","console","log","response","fetch","method","headers","ok","Error","data","json","type","payload","files","error","message","uploadFile","formData","body","shareFile","fileId","JSON","stringify","initialState","status","fileSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","rejected","push","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = () => async (dispatch, getState) => {\n    try {\n      // Get the token from Redux store or localStorage (adjust accordingly)\n      const token = getState().auth.token || localStorage.getItem('token');\n      console.log(token)\n  \n      const response = await fetch('http://localhost:8000/auth/files/list', {\n        method: 'GET',\n        headers: {\n          'Content-Type': 'application/json',\n          'Authorization': `Bearer ${token}`, // Add the Bearer token\n        },\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to fetch files');\n      }\n  \n      const data = await response.json();\n  \n      // Dispatch success action with the files data\n      dispatch({ type: 'files/fetchSuccess', payload: data.files });\n    } catch (error) {\n      dispatch({ type: 'files/fetchFailure', error: error.message });\n    }\n  };\n  \n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk(\n  'files/uploadFile',\n  async (formData) => {\n    const response = await fetch('http://localhost:8000/auth/files/upload', {\n      method: 'POST',\n      body: formData,\n    });\n    return response.json();\n  }\n);\n\n// Share file with a user\nexport const shareFile = createAsyncThunk(\n  'files/shareFile',\n  async ({ fileId, data }) => {\n    const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n);\n\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n};\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload;\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(uploadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(shareFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(shareFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // handle the successful share action (e.g., update the file list)\n      })\n      .addCase(shareFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default fileSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}