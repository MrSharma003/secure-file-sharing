{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport CryptoJS from 'crypto-js';\n\n// const SECRET_KEY = CryptoJS.enc.Utf8.parse('12345678901234567890123456789012');\n// const BLOCK_SIZE = 16; // AES block size (bytes)\n\nconst decryptFile = encryptedHex => {\n  try {\n    // Convert the hex string to a WordArray (CryptoJS format)\n    const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedHex);\n    console.log(\"Encrypted Bytes:\", encryptedBytes);\n\n    // Extract the first 16 bytes as the IV (Initialization Vector)\n    const iv = encryptedBytes.clone().words.slice(0, 4); // AES block size is 16 bytes (4 words, each word = 4 bytes)\n    console.log(\"IV:\", iv);\n\n    // Extract the ciphertext (everything after the IV)\n    const ciphertext = encryptedBytes.clone().words.slice(4); // The rest is ciphertext\n    console.log(\"Ciphertext:\", ciphertext);\n\n    // AES key used for encryption (same as on the backend)\n    const key = CryptoJS.enc.Utf8.parse('123456789012345678901234'); // AES 256-bit key\n    console.log(\"Key:\", key);\n\n    // Decrypt the ciphertext using the key and IV\n    const decrypted = CryptoJS.AES.decrypt({\n      ciphertext: CryptoJS.lib.WordArray.create(ciphertext)\n    }, key, {\n      iv: CryptoJS.lib.WordArray.create(iv)\n    });\n\n    // Convert the decrypted bytes back to a UTF-8 string\n    const decryptedText = decrypted.toString(CryptoJS.enc.Utf8);\n    console.log(\"Decrypted Text:\", decryptedText);\n    if (!decryptedText) {\n      throw new Error(\"Decryption failed, empty result\");\n    }\n    return decryptedText;\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Decryption failed');\n  }\n};\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async (_, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch('http://localhost:8000/auth/files/list', {\n    method: 'GET',\n    headers: {\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}` // Add the Bearer token\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to fetch files');\n  }\n  const data = await response.json();\n  return data.files;\n});\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk('files/uploadFile', async (formData, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch('http://localhost:8000/auth/files/upload', {\n    method: 'POST',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    },\n    body: formData\n  });\n  if (!response.ok) {\n    throw new Error('File upload failed');\n  }\n  return response.json();\n});\n\n// Share file with a user\nexport const shareFile = createAsyncThunk('files/shareFile', async ({\n  fileId,\n  data\n}) => {\n  const response = await fetch(`http://localhost:8000/auth/share/file/${fileId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n});\n\n// Generate a secure link for the file\nexport const generateSecureLink = createAsyncThunk('files/generateSecureLink', async (fileId, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch(`http://localhost:8000/auth/share_files/generate_secure_link/${fileId}/`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to generate secure link');\n  }\n  const data = await response.json();\n  console.log(data);\n  return data.secureLink; // Assuming the API returns a `secureLink` field\n});\n\n// Download a file\nexport const downloadFile = createAsyncThunk('files/downloadFile', async (fileId, {\n  getState\n}) => {\n  const token = getState().auth.token;\n  const response = await fetch(`http://localhost:8000/auth/files/download/${fileId}/`, {\n    method: 'GET',\n    headers: {\n      'Authorization': `Bearer ${token}`\n    }\n  });\n  if (!response.ok) {\n    throw new Error('Failed to download the file');\n  }\n\n  // Assuming the response JSON contains `file_content` as hex string\n  const data = await response.json();\n  const encryptedHex = data.file_content;\n  console.log(\"file content\", data.file_content);\n  try {\n    const decryptedFile = decryptFile(encryptedHex);\n    const blob = new Blob([decryptedFile], {\n      type: 'application/octet-stream'\n    });\n\n    // Trigger file download\n    const url = window.URL.createObjectURL(blob);\n    const a = document.createElement('a');\n    a.href = url;\n    a.download = 'decrypted_file.txt'; // Replace with a dynamic file name if needed\n    document.body.appendChild(a);\n    a.click();\n    a.remove();\n    window.URL.revokeObjectURL(url);\n    return fileId; // Optionally return the fileId to update state\n  } catch (error) {\n    console.error('Decryption failed:', error);\n    throw new Error('Failed to decrypt and download file.');\n  }\n});\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n  secureLink: null // New state to hold the generated secure link\n};\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {},\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload; // Set the files to the fetched data\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(uploadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(uploadFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n    }).addCase(uploadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(shareFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(shareFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // handle the successful share action (e.g., update the file list)\n    }).addCase(shareFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(generateSecureLink.pending, state => {\n      state.status = 'loading';\n    }).addCase(generateSecureLink.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.secureLink = action.payload; // Set the generated secure link\n    }).addCase(generateSecureLink.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(downloadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(downloadFile.fulfilled, state => {\n      state.status = 'succeeded';\n      // Handle post-download logic if needed\n    }).addCase(downloadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","CryptoJS","decryptFile","encryptedHex","encryptedBytes","enc","Hex","parse","console","log","iv","clone","words","slice","ciphertext","key","Utf8","decrypted","AES","decrypt","lib","WordArray","create","decryptedText","toString","Error","error","fetchFiles","_","getState","token","auth","response","fetch","method","headers","ok","data","json","files","uploadFile","formData","body","shareFile","fileId","JSON","stringify","generateSecureLink","secureLink","downloadFile","file_content","decryptedFile","blob","Blob","type","url","window","URL","createObjectURL","a","document","createElement","href","download","appendChild","click","remove","revokeObjectURL","initialState","status","fileSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport CryptoJS from 'crypto-js';\n\n// const SECRET_KEY = CryptoJS.enc.Utf8.parse('12345678901234567890123456789012');\n// const BLOCK_SIZE = 16; // AES block size (bytes)\n\nconst decryptFile = (encryptedHex) => {\n    try {\n      // Convert the hex string to a WordArray (CryptoJS format)\n      const encryptedBytes = CryptoJS.enc.Hex.parse(encryptedHex);\n      console.log(\"Encrypted Bytes:\", encryptedBytes);\n  \n      // Extract the first 16 bytes as the IV (Initialization Vector)\n      const iv = encryptedBytes.clone().words.slice(0, 4);  // AES block size is 16 bytes (4 words, each word = 4 bytes)\n      console.log(\"IV:\", iv);\n  \n      // Extract the ciphertext (everything after the IV)\n      const ciphertext = encryptedBytes.clone().words.slice(4); // The rest is ciphertext\n      console.log(\"Ciphertext:\", ciphertext);\n  \n      // AES key used for encryption (same as on the backend)\n      const key = CryptoJS.enc.Utf8.parse('123456789012345678901234');  // AES 256-bit key\n      console.log(\"Key:\", key);\n  \n      // Decrypt the ciphertext using the key and IV\n      const decrypted = CryptoJS.AES.decrypt(\n        { ciphertext: CryptoJS.lib.WordArray.create(ciphertext) },\n        key,\n        { iv: CryptoJS.lib.WordArray.create(iv) }\n      );\n  \n      // Convert the decrypted bytes back to a UTF-8 string\n      const decryptedText = decrypted.toString(CryptoJS.enc.Utf8);\n      console.log(\"Decrypted Text:\", decryptedText);\n  \n      if (!decryptedText) {\n        throw new Error(\"Decryption failed, empty result\");\n      }\n  \n      return decryptedText;\n    } catch (error) {\n      console.error('Decryption failed:', error);\n      throw new Error('Decryption failed');\n    }\n  };  \n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk(\n  'files/fetchFiles',\n  async (_, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch('http://localhost:8000/auth/files/list', {\n      method: 'GET',\n      headers: {\n        'Content-Type': 'application/json',\n        'Authorization': `Bearer ${token}`, // Add the Bearer token\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to fetch files');\n    }\n\n    const data = await response.json();\n    return data.files;\n  }\n);\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk(\n  'files/uploadFile',\n  async (formData, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch('http://localhost:8000/auth/files/upload', {\n      method: 'POST',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n      body: formData,\n    });\n\n    if (!response.ok) {\n      throw new Error('File upload failed');\n    }\n\n    return response.json();\n  }\n);\n\n// Share file with a user\nexport const shareFile = createAsyncThunk(\n  'files/shareFile',\n  async ({ fileId, data }) => {\n    const response = await fetch(`http://localhost:8000/auth/share/file/${fileId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n);\n\n// Generate a secure link for the file\nexport const generateSecureLink = createAsyncThunk(\n  'files/generateSecureLink',\n  async (fileId, { getState }) => {\n    const token = getState().auth.token;\n    const response = await fetch(`http://localhost:8000/auth/share_files/generate_secure_link/${fileId}/`, {\n      method: 'GET',\n      headers: {\n        'Authorization': `Bearer ${token}`,\n      },\n    });\n\n    if (!response.ok) {\n      throw new Error('Failed to generate secure link');\n    }\n\n    const data = await response.json();\n    console.log(data);\n    return data.secureLink; // Assuming the API returns a `secureLink` field\n  }\n);\n\n// Download a file\nexport const downloadFile = createAsyncThunk(\n    'files/downloadFile',\n    async (fileId, { getState }) => {\n      const token = getState().auth.token;\n      const response = await fetch(`http://localhost:8000/auth/files/download/${fileId}/`, {\n        method: 'GET',\n        headers: {\n          'Authorization': `Bearer ${token}`,\n        },\n      });\n  \n      if (!response.ok) {\n        throw new Error('Failed to download the file');\n      }\n  \n      // Assuming the response JSON contains `file_content` as hex string\n      const data = await response.json();\n      const encryptedHex = data.file_content;\n      console.log(\"file content\", data.file_content);\n  \n      try {\n        const decryptedFile = decryptFile(encryptedHex);\n        const blob = new Blob([decryptedFile], { type: 'application/octet-stream' });\n  \n        // Trigger file download\n        const url = window.URL.createObjectURL(blob);\n        const a = document.createElement('a');\n        a.href = url;\n        a.download = 'decrypted_file.txt'; // Replace with a dynamic file name if needed\n        document.body.appendChild(a);\n        a.click();\n        a.remove();\n        window.URL.revokeObjectURL(url);\n  \n        return fileId; // Optionally return the fileId to update state\n      } catch (error) {\n        console.error('Decryption failed:', error);\n        throw new Error('Failed to decrypt and download file.');\n      }\n    }\n  );\n  \n\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n  secureLink: null, // New state to hold the generated secure link\n};\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {},\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload; // Set the files to the fetched data\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(uploadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(shareFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(shareFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // handle the successful share action (e.g., update the file list)\n      })\n      .addCase(shareFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(generateSecureLink.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(generateSecureLink.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.secureLink = action.payload; // Set the generated secure link\n      })\n      .addCase(generateSecureLink.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(downloadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(downloadFile.fulfilled, (state) => {\n        state.status = 'succeeded';\n        // Handle post-download logic if needed\n      })\n      .addCase(downloadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default fileSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}