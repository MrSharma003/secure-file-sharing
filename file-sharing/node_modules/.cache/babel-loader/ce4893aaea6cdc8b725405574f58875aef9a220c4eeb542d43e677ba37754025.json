{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunk to fetch files\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async () => {\n  const response = await axios.get('http://localhost:8000/auth/files/list');\n  return response.data.files;\n});\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState: {\n    files: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    shareFile: (state, action) => {\n      // Handle sharing the file\n      const {\n        fileId,\n        data\n      } = action.payload;\n      // Logic to share the file (optional)\n    }\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload;\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport const {\n  shareFile\n} = fileSlice.actions;\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","axios","fetchFiles","response","get","data","files","fileSlice","name","initialState","status","error","reducers","shareFile","state","action","fileId","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","message","actions","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport axios from 'axios';\n\n// Async thunk to fetch files\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async () => {\n  const response = await axios.get('http://localhost:8000/auth/files/list');\n  return response.data.files;\n});\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState: {\n    files: [],\n    status: 'idle',\n    error: null\n  },\n  reducers: {\n    shareFile: (state, action) => {\n      // Handle sharing the file\n      const { fileId, data } = action.payload;\n      // Logic to share the file (optional)\n    },\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload;\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport const { shareFile } = fileSlice.actions;\n\nexport default fileSlice.reducer;\n"],"mappings":"AAAA,SAASA,WAAW,EAAEC,gBAAgB,QAAQ,kBAAkB;AAChE,OAAOC,KAAK,MAAM,OAAO;;AAEzB;AACA,OAAO,MAAMC,UAAU,GAAGF,gBAAgB,CAAC,kBAAkB,EAAE,YAAY;EACzE,MAAMG,QAAQ,GAAG,MAAMF,KAAK,CAACG,GAAG,CAAC,uCAAuC,CAAC;EACzE,OAAOD,QAAQ,CAACE,IAAI,CAACC,KAAK;AAC5B,CAAC,CAAC;AAEF,MAAMC,SAAS,GAAGR,WAAW,CAAC;EAC5BS,IAAI,EAAE,OAAO;EACbC,YAAY,EAAE;IACZH,KAAK,EAAE,EAAE;IACTI,MAAM,EAAE,MAAM;IACdC,KAAK,EAAE;EACT,CAAC;EACDC,QAAQ,EAAE;IACRC,SAAS,EAAEA,CAACC,KAAK,EAAEC,MAAM,KAAK;MAC5B;MACA,MAAM;QAAEC,MAAM;QAAEX;MAAK,CAAC,GAAGU,MAAM,CAACE,OAAO;MACvC;IACF;EACF,CAAC;EACDC,aAAa,EAAGC,OAAO,IAAK;IAC1BA,OAAO,CACJC,OAAO,CAAClB,UAAU,CAACmB,OAAO,EAAGP,KAAK,IAAK;MACtCA,KAAK,CAACJ,MAAM,GAAG,SAAS;IAC1B,CAAC,CAAC,CACDU,OAAO,CAAClB,UAAU,CAACoB,SAAS,EAAE,CAACR,KAAK,EAAEC,MAAM,KAAK;MAChDD,KAAK,CAACJ,MAAM,GAAG,WAAW;MAC1BI,KAAK,CAACR,KAAK,GAAGS,MAAM,CAACE,OAAO;IAC9B,CAAC,CAAC,CACDG,OAAO,CAAClB,UAAU,CAACqB,QAAQ,EAAE,CAACT,KAAK,EAAEC,MAAM,KAAK;MAC/CD,KAAK,CAACJ,MAAM,GAAG,QAAQ;MACvBI,KAAK,CAACH,KAAK,GAAGI,MAAM,CAACJ,KAAK,CAACa,OAAO;IACpC,CAAC,CAAC;EACN;AACF,CAAC,CAAC;AAEF,OAAO,MAAM;EAAEX;AAAU,CAAC,GAAGN,SAAS,CAACkB,OAAO;AAE9C,eAAelB,SAAS,CAACmB,OAAO","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}