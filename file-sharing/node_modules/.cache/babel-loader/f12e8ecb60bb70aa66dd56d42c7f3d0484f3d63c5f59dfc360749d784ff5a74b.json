{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk('files/fetchFiles', async () => {\n  const response = await fetch('http://localhost:8000/auth/files/list');\n  console.log(await response.json());\n  return response.json();\n});\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk('files/uploadFile', async formData => {\n  const response = await fetch('http://localhost:8000/auth/files/upload', {\n    method: 'POST',\n    body: formData\n  });\n  return response.json();\n});\n\n// Share file with a user\nexport const shareFile = createAsyncThunk('files/shareFile', async ({\n  fileId,\n  data\n}) => {\n  const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n    method: 'POST',\n    headers: {\n      'Content-Type': 'application/json'\n    },\n    body: JSON.stringify(data)\n  });\n  return response.json();\n});\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null\n};\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: builder => {\n    builder.addCase(fetchFiles.pending, state => {\n      state.status = 'loading';\n    }).addCase(fetchFiles.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files = action.payload;\n    }).addCase(fetchFiles.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(uploadFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(uploadFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n    }).addCase(uploadFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    }).addCase(shareFile.pending, state => {\n      state.status = 'loading';\n    }).addCase(shareFile.fulfilled, (state, action) => {\n      state.status = 'succeeded';\n      // handle the successful share action (e.g., update the file list)\n    }).addCase(shareFile.rejected, (state, action) => {\n      state.status = 'failed';\n      state.error = action.error.message;\n    });\n  }\n});\nexport default fileSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","fetchFiles","response","fetch","console","log","json","uploadFile","formData","method","body","shareFile","fileId","data","headers","JSON","stringify","initialState","files","status","error","fileSlice","name","reducers","extraReducers","builder","addCase","pending","state","fulfilled","action","payload","rejected","message","push","reducer"],"sources":["/Users/prashant/Development/file-sharing/src/features/files/fileSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\n\n// Fetch files list from the API\nexport const fetchFiles = createAsyncThunk(\n  'files/fetchFiles',\n  async () => {\n    const response = await fetch('http://localhost:8000/auth/files/list');\n    console.log(await response.json());\n    return response.json();\n  }\n);\n\n// Upload file to the server\nexport const uploadFile = createAsyncThunk(\n  'files/uploadFile',\n  async (formData) => {\n    const response = await fetch('http://localhost:8000/auth/files/upload', {\n      method: 'POST',\n      body: formData,\n    });\n    return response.json();\n  }\n);\n\n// Share file with a user\nexport const shareFile = createAsyncThunk(\n  'files/shareFile',\n  async ({ fileId, data }) => {\n    const response = await fetch(`http://localhost:8000/auth/files/share/${fileId}`, {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json',\n      },\n      body: JSON.stringify(data),\n    });\n    return response.json();\n  }\n);\n\nconst initialState = {\n  files: [],\n  status: 'idle',\n  error: null,\n};\n\nconst fileSlice = createSlice({\n  name: 'files',\n  initialState,\n  reducers: {\n    // other reducers here\n  },\n  extraReducers: (builder) => {\n    builder\n      .addCase(fetchFiles.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(fetchFiles.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files = action.payload;\n      })\n      .addCase(fetchFiles.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(uploadFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(uploadFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        state.files.push(action.payload); // Assuming the server returns the newly uploaded file\n      })\n      .addCase(uploadFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      })\n      .addCase(shareFile.pending, (state) => {\n        state.status = 'loading';\n      })\n      .addCase(shareFile.fulfilled, (state, action) => {\n        state.status = 'succeeded';\n        // handle the successful share action (e.g., update the file list)\n      })\n      .addCase(shareFile.rejected, (state, action) => {\n        state.status = 'failed';\n        state.error = action.error.message;\n      });\n  },\n});\n\nexport default fileSlice.reducer;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}